{
  "info": {
    "_postman_id": "6ba7b811-9dad-11d1-80b4-00c04fd430c8",
    "name": "Example API",
    "description": "An example api which handles various rpc requests.\nThis api follows the json-rpc 2.0 specification. More information available at http://www.jsonrpc.org/specification.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Session.Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"jsonrpc\":{\"type\":\"string\",\"enum\":[\"2.0\"]},\"result\":{\"type\":\"object\",\"properties\":{\"session_token\":{\"description\":\"Bearer token of the created session.\",\"examples\":[\"123456890\"],\"type\":\"string\",\"minLength\":1},\"validity\":{\"description\":\"Validity of the session token in seconds.\",\"examples\":[3600],\"type\":\"number\",\"multipleOf\":1}},\"required\":[\"session_token\"]}},\"required\":[\"id\",\"jsonrpc\",\"result\"]};",
              "",
              "pm.test(\"Schema is valid\", function() {",
              "  var jsonData = pm.response.json();",
              "  tv4.validate(jsonData, schema);",
              "  pm.expect(JSON.stringify(tv4.error)).to.eql(\"null\");",
              "});",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1234567890\",\n  \"method\": \"Session.Login\",\n  \"params\": {\n    \"name\": \"admin\",\n    \"password\": \"123456\"\n  }\n}"
        },
        "url": { "raw": "{{url}}", "host": ["{{url}}"] },
        "description": "Authenticates the user using the provided credentials and creates a new session."
      },
      "response": []
    },
    {
      "name": "Session.Logout",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"jsonrpc\":{\"type\":\"string\",\"enum\":[\"2.0\"]},\"result\":{\"description\":\"Always '0'.\",\"examples\":[0],\"type\":\"number\",\"minimum\":0,\"maximum\":0}},\"required\":[\"id\",\"jsonrpc\",\"result\"]};",
              "",
              "pm.test(\"Schema is valid\", function() {",
              "  var jsonData = pm.response.json();",
              "  tv4.validate(jsonData, schema);",
              "  pm.expect(JSON.stringify(tv4.error)).to.eql(\"null\");",
              "});",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1234567890\",\n  \"method\": \"Session.Logout\"\n}"
        },
        "url": { "raw": "{{url}}", "host": ["{{url}}"] },
        "description": "Destroys an existing session."
      },
      "response": []
    },
    {
      "name": "Session.KeepAlive",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"jsonrpc\":{\"type\":\"string\",\"enum\":[\"2.0\"]},\"result\":{\"description\":\"Always '0'.\",\"examples\":[0],\"type\":\"number\",\"minimum\":0,\"maximum\":0}},\"required\":[\"id\",\"jsonrpc\",\"result\"]};",
              "",
              "pm.test(\"Schema is valid\", function() {",
              "  var jsonData = pm.response.json();",
              "  tv4.validate(jsonData, schema);",
              "  pm.expect(JSON.stringify(tv4.error)).to.eql(\"null\");",
              "});",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1234567890\",\n  \"method\": \"Session.KeepAlive\"\n}"
        },
        "url": { "raw": "{{url}}", "host": ["{{url}}"] },
        "description": "Refreshs an existing session so that it keeps alive and doesn't time out. This method does nothing but refreshing the timeout."
      },
      "response": []
    },
    {
      "name": "User.Add",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"jsonrpc\":{\"type\":\"string\",\"enum\":[\"2.0\"]},\"result\":{\"description\":\"Always '0'.\",\"examples\":[0],\"type\":\"number\",\"minimum\":0,\"maximum\":0}},\"required\":[\"id\",\"jsonrpc\",\"result\"]};",
              "",
              "pm.test(\"Schema is valid\", function() {",
              "  var jsonData = pm.response.json();",
              "  tv4.validate(jsonData, schema);",
              "  pm.expect(JSON.stringify(tv4.error)).to.eql(\"null\");",
              "});",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1234567890\",\n  \"method\": \"User.Add\",\n  \"params\": {\n    \"name\": \"user\",\n    \"email\": \"user@example.org\",\n    \"address\": [\n      1600,\n      \"Pennsylvania\",\n      \"Avenue\",\n      \"NW\"\n    ],\n    \"password\": \"1234567890\"\n  }\n}"
        },
        "url": { "raw": "{{url}}", "host": ["{{url}}"] },
        "description": "Adds a new user."
      },
      "response": []
    },
    {
      "name": "User.Delete",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"jsonrpc\":{\"type\":\"string\",\"enum\":[\"2.0\"]},\"result\":{\"description\":\"Always '0'.\",\"examples\":[0],\"type\":\"number\",\"minimum\":0,\"maximum\":0}},\"required\":[\"id\",\"jsonrpc\",\"result\"]};",
              "",
              "pm.test(\"Schema is valid\", function() {",
              "  var jsonData = pm.response.json();",
              "  tv4.validate(jsonData, schema);",
              "  pm.expect(JSON.stringify(tv4.error)).to.eql(\"null\");",
              "});",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1234567890\",\n  \"method\": \"User.Delete\",\n  \"params\": {\n    \"name\": \"user\"\n  }\n}"
        },
        "url": { "raw": "{{url}}", "host": ["{{url}}"] },
        "description": "Deletes an existing user."
      },
      "response": []
    },
    {
      "name": "User.GetAll",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"jsonrpc\":{\"type\":\"string\",\"enum\":[\"2.0\"]},\"result\":{\"description\":\"List of all existing users.\",\"type\":\"array\",\"items\":{\"description\":\"Information about a user.\",\"type\":\"object\",\"properties\":{\"name\":{\"description\":\"Name of the user.\",\"examples\":[\"user\"],\"type\":\"string\",\"minLength\":1},\"email\":{\"description\":\"Email of the user.\",\"examples\":[\"user@example.org\"],\"type\":\"string\",\"format\":\"email\"},\"address\":{\"description\":\"Address of the user to add.\",\"type\":\"array\",\"items\":[{\"name\":\"number\",\"description\":\"Address number.\",\"examples\":[1600],\"type\":\"number\",\"minimum\":1},{\"name\":\"street_name\",\"description\":\"Name of the street.\",\"examples\":[\"Pennsylvania\"],\"type\":\"string\",\"minLength\":1},{\"name\":\"street_type\",\"description\":\"Type of the street.\",\"examples\":[\"Avenue\"],\"type\":\"string\",\"enum\":[\"Street\",\"Avenue\",\"Boulevard\"]},{\"name\":\"direction\",\"description\":\"City quadrant of the address\",\"examples\":[\"NW\"],\"type\":\"string\",\"enum\":[\"NW\",\"NE\",\"SW\",\"SE\"]}]}},\"required\":[\"name\",\"email\",\"address\"]}}},\"required\":[\"id\",\"jsonrpc\",\"result\"]};",
              "",
              "pm.test(\"Schema is valid\", function() {",
              "  var jsonData = pm.response.json();",
              "  tv4.validate(jsonData, schema);",
              "  pm.expect(JSON.stringify(tv4.error)).to.eql(\"null\");",
              "});",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1234567890\",\n  \"method\": \"User.GetAll\"\n}"
        },
        "url": { "raw": "{{url}}", "host": ["{{url}}"] },
        "description": "This method returns an array with information about all existing users."
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "url",
      "value": "https://www.example.org"
    },
    {
      "key": "url",
      "value": "https://www.test.example.org"
    }
  ]
}
